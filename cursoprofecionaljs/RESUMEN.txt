¿Qué forma a un profesional?

Te presento una lista de estas cosas que lo forman:

    Conocimiento del lenguaje.

    Conocimiento de entornos de programación.

    Mejores prácticas.

    Versado en código.

    Herramientas.

    Ética / Profesionalismo.

    Experiencia.
Entornos de programación

Cuando estamos desarrollando lo hacemos para la WEB, para un celular, para seguidores. Existen diferentes entornos que nos ofrecen APIS, tenemos que conocer todo esto. V
‌
Versado en código

Esto quiere decir que tenemos que leer mucho código, un lugar hermoso para ponernos a leer código es GitHub. Debemos leer mucho y hacerlo de forma muy constante.

Mejores prácticas

No vamos a reinventar la rueda, hay muchas personas que ya han solucionado los problemas más comunes, tenemos que usar estas soluciones, a estas soluciones se les llama: patrones de diseño.

// Como llega un script al navegador //

Dom = Document object model => 
 {
     Es la representación que hace el navegador de un documento HTML
     Este lo que hace es hacer un arbol con las etiquetas 
     Cuando el navegador termina de leer las etiquetas ocurre el evento DOMContentLoaded Cuando este elemento se ejecuta se puede tener la certesa de que todo el documento a sido cargado
 }

script => 
 {
     Lo scripts deben siempre ponerse al al final y antes de cerrar la etiqueta body ya que estos detienen la ejecucion del dom ya que cuando encuentra un script primero lo ejecuta y luego continua con el proceso

     Atributos especiales de script
     async : ete atributo no va a detener la ejecucion del dom asta que este este descargado

     defer : este realizara la peticion pero solo se ejecutara cuando el documento html haya cargado completamente
 }


::::::::::::::::::::::
Mas info importante
::::::::::::::::::::::
En este curso se hiso la practica de platzi video pero el reproductor
El nombre del proyecto es media player

la funcion play() pertenece a HTML.MediaElement.play() esta funcion sirve para darle play a un video 

HTML.MediaElement tiene varias funciones para mas informacion buscar en google

IIFE son funciones que se ejecutan asi mismas

//:::::::::this:::::::::::://
this se refiere a un objeto, ese objeto es el que actualmente está ejecutando un pedazo de código.

No se puede asignar un valor a this directamente y este depende de en que scope nos encontramos:

-Cuando llamamos a this en el Global Scope o Function Scope, se hace referencia al objeto window. A excepción de cuando estamos en strict mode que nos regresará undefined.
-Cuando llamamos a this desde una función que está contenida en un objeto, this se hace referencia a ese objeto.
-Cuando llamamos a this desde una “clase”, se hace referencia a la instancia generada por el constructor.

Como usar el modo strict solo hay que agregar al documento js 
'use strict' este se puede asignar tanto en un anbito de bloque como global 

//:::::::::Funciones para el this::::::::::::
Las funciones call, apply y bind son parte del prototipo Function. Toda función usa este prototipo y por lo tanto tiene estas tres funciones.

    functionName.call(). Ejecuta la función recibiendo como primer argumento el this y los siguientes son los argumentos que recibe la función que llamó a call.
    functionName.apply(). Ejecuta la función recibiendo como primer argumento el this y como segundo un arreglo con los argumentos que recibe la función que llamó a apply.
    functionName.bind(). Recibe como primer y único argumento el this. No ejecuta la función, sólo regresa otra función con el nuevo this integrado.
//::::::::: V8 o compilation en js::::::::::::::::::::::/
El JS Engine recibe el código fuente y lo procesa de la siguiente manera:

    El parser descompone y crea tokens que integran el AST.
    Se compila a bytecode y se ejecuta.
    Lo que se pueda se optimiza a machine code y se reemplaza el código base.

El parser es del 15% al 20% del proceso de ejecución por lo que hay que usar parser del código justo en el momento que lo necesitamos y no antes de saber si se va a usar o no.

pagina para interactuar con los tokens https://esprima.org/demo/parse.html#

El ast es un grafo que representa un programa

pagina para interactuar con los ast https://astexplorer.net/

//::::::: Bytecode diferencias del Machine Code :::::::::

Bytecode 
    Codigo parecido a assembly 
    Portatil 
    Ejecutado por una virtual machine
Machine code 
    Codigo binario
    Instrucciones a una arquitectura o procesador

// ::::: Type motors de js ::::::::::::::::::
 
 V8- node y googleCrone
 SpiderMonkey firefox
 Chakra edge 
 JavaScriptCore zafari 

//:::::: Event loop ::::::::::::

El Event Loop hace que Javascript parezca ser multihilo a pesar de que corre en un solo proceso.

Javascript se organiza usando las siguientes estructuras de datos:

    Stack. Va apilando de forma organizada las diferentes instrucciones que se llaman. Lleva así un rastro de dónde está el programa, en que punto de ejecución nos encontramos.

    Memory Heap. De forma desorganizada se guarda información de las variables y del scope.
    Schedule Tasks. Aquí se agregan a la cola, las tareas programadas para su ejecución.
    
    Task Queue. Aquí se agregan las tares que ya están listas para pasar al stack y ser ejecutadas. El stack debe estar vacío para que esto suceda.
    
    MicroTask Queue. Aquí se agregan las promesas. Esta tiene mayor prioridad que task.

//::::::::::Promesas :::::::::::::::::::::::::::::

Para crear las promesas usamos la clase Promise. El constructor de Promise recibe un sólo argumento, un callback con dos parámetros, resolve y reject. resolve es la función a ejecutar cuando se resuelve y reject cuando se rechaza.

El async/await es sólo syntax sugar de una promesa, por debajo es exactamente lo mismo.

La clase Promise tiene algunos métodos estáticos bastante útiles:

    Promise.all. Da error si una de las promesas es rechazada.
    Promise.race. Regresa sólo la promesa que se resuelva primero.


El Event Loop es un loop que está ejecutando todo el tiempo y pasa periódicamente revisando las queues y el stack moviendo tareas entre estas dos estructuras.

//:::::: Getters y setters ::::::::::::::::

Los getters y setters son funciones que podemos usar en un objeto para tener propiedades virtuales. Se usan los keywords set y get para crear estas propiedades.

Estas propiedades al ser funciones pueden llevar una validación de por medio y ser usadas con el operador de asignación como si fueran una variable más dentro del objeto.

//::::::: Proxy ::::::::::::::::::::::::::::::::::::://

El proxy sirve para interceptar la lectura de propiedades de un objeto (los get, y set) entre muchas otras funciones. Así, antes de que la llamada llegue al objeto podemos manipularla con una lógica que nosotros definamos.

mas info en su documentacion https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Proxy

//::::SyntaxError ::::::::::::::::://
Un SyntaxError es lanzado cuando el motor de js se encuentra con partes de código que no forman parte de la sintaxis del lenguaje al momento de analizar el código.

//::::::: Generadores ::::::::::::::::::::::::::

Los generadores son funciones especiales, pueden pausar su ejecución y luego volver al punto donde se quedaron recordando su scope.

Algunas de sus características:

    Los generadores regresan una función.
    Empiezan suspendidos y se tiene que llamar next para que ejecuten.
    Regresan un value y un boolean done que define si ya terminaron.
    yield es la instrucción que regresa un valor cada vez que llamamos a next y detiene la ejecución del generador.

//:::::::::AbortController:::::::::::::

La peticiones AJAX permitieron en su tiempo hacer peticiones asíncronas al servidor sin tener que detener la carga de la página. Hoy en día se utiliza la función fetch para esto.

Con fetch tenemos algo llamado AbortController que nos permite enviar una señal a una petición en plena ejecución para detenerla.

//:::::::::::Evento visibilityChange:::::::::

Es un evento del dom

El visibilityChange forma parte del API del DOM llamado Page Visibility y nos deja saber si el elemento es visible, pude ser usado para ejecutar una acción cuando cambiamos de pestaña. Así podemos ahorrar batería y mejorar la UX.

Otros casos de uso para utilizar la API Page Visibility:
 

    Un sitio tiene un carrusel de imágenes que no debería avanzar a la siguiente diapositiva a no ser que el usuario esté viendo la página.
     
    Una aplicación que muestra un panel de información y no se quiere que se actualice la información del servidor cuando la página no está visible.
     
    Una página quiere detectar cuando se está precargando para poder mantener un recuento preciso de las vistas de página.
     
    Un sitio desea desactivar los sonidos cuando el dispositivo está en modo de espera (el usuario presiona el botón de encendido para apagar la pantalla).

//::::::Typescrip ::::::::::::::::::

TypeScript es un superset de JavaScript que añade tipos a nuestras variables ayudando así a la detección de errores de forma temprana y mejorando el autocompletado.

Los navegadores no entienden TypeScript así que lo vamos a transpilar a JavaScript usando Parcel.



    boolean. Valor verdadero o falso.
    number. Números.
    string. Cadenas de texto.
    string[]. Arreglo del tipo cadena de texto.
    Array. Arreglo multi-tipo, acepta cadenas de texto o números.
    enum. Es un tipo especial llamado enumeración.
    any. Cualquier tipo.
    object. Del tipo objeto.

//::::::::Patrones de diseñol ::::::::::::::::::::::::

Son soluciones generales ya probadas dentro de un contexto que las limita a problemas frecuentes que nos encontramos en el desarrollo de software.

Beneficios

    Los patrones de diseño son una caja de Herramientas de soluciones bien probadas a problemas comunes de diseño de software

    Te proveen un lenguaje común que permite comunicarse de forma específica y eficiente

Para tener en cuenta 

    Siempre busca pensar en término de diseño no de patrones

    Usa un patrón cuando hay una necesidad natural de usarlos Ojo recuerda estos agregan mas complejidad a una app 

    Di existe una alternativa más simple prefierela.

Categorias de patrones de diseño

    Creacional: Proveen diferentes mecanismo para crear objectos
        Abstract Factory
        Builder
        Factory Method
        Prototype
        Singleton
    Estructurales: Describen formas de componer objectos para formar nuevas estructuras flexibles y efeicientes 
        Adapter
        Bridge
        Composite
        Decorator
        Facade
        Flyweight
        Proxy    

    ️Comportamiento: Gestionan algoritmos y responsabilidades entre objetos.
        Chain of Responsibility
        Command
        Interpreter
        Iterator
        Mediator
        Memento
        Observer
        State
        Strategy
        Template Method
        Visitor   

    Ejemplos y casos de uso:
                Patrón Singleton
        Es un patrón que te asegura que una clase solo tiene una instancia. Esta única instancia puede ser consumida por cualquier otro objeto. 
    
                Patrón Observer
        El patrón observer se compone de un sujeto que ofrece mecanismos de suscripción y desuscripción a múltiples observadores que quieren ser notificados de los cambios en dicho sujeto. Cada observador expone un método de update que es usado por el sujeto para notificar cualquier cambio a todos los suscritos.

        Es uno de los patrones más utilizados, algunos ejemplos típicos son:

            Newsletter
            Sockets
            Listeners en páginas web
        
        Redux es la libreria de react que usa el patron observer.
    
            Patrón Decorator
        Añade nuevas responsabilidades a un objeto de forma dinámica permitiendo así extender su funcionalidad sin tener que usar subclases.

          


:::::::::::::::::::::::::::::::::
Fraces de desarrollo 
:::::::::::::::::::::::::::::::::

    Una entidad de software (clase,módulo, función, etc) debe quedar abierta para su extensión pero cerrada para su modificación  Esto pertenece (Open Closed Principle)

::::::::::::::::::::::::::::::::
Investigar mas sobre 
::::::::::::::::::::::::::::::::
- Patrones de diseño
- bundling y code // splitting 
- proxy js
- Api Page Visibility
- Service Worker API
- Ver los videos de https://www.youtube.com/watch?v=aUtWHiV3RJg
- Interfaces en TypeScript
- Mirar esta pagina https://every-layout.dev/  patron de siseño de paginas web 
- Investigar sobre el principo Open Closed Principle "Pricipio de abierto y cerrado"

